usethis::use_mit_license()
?sapply
library(devtools)
check()
check()
load_all()
?register_log
load_all()
i <- seq(0, 25, 0.25)
x <- cos(i)
plot(i, x)
lines(i, x)
sw_size <- 10
ts <- ts_data(x, sw_size)
head(ts, 3)
test_size <- 1
samp <- ts_sample(ts, test_size)
head(samp$train, 3)
head(samp$test)
preproc <- ts_gminmax()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp)
model <- fit(model, x=io_train$input, y=io_train$output)
usethis::use_r("zzz")
library(reticulate)
install.packages("reticulate")
i <- seq(0, 25, 0.25)
x <- cos(i)
plot(i, x)
lines(i, x)
sw_size <- 10
ts <- ts_data(x, sw_size)
head(ts, 3)
test_size <- 1
samp <- ts_sample(ts, test_size)
head(samp$train, 3)
head(samp$test)
preproc <- ts_gminmax()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
library(reticulate)
check()
check()
load_all()
model <- fit(model, x=io_train$input, y=io_train$output)
check()
load_all()
model <- fit(model, x=io_train$input, y=io_train$output)
check()
model <- fit(model, x=io_train$input, y=io_train$output)
check()
load_all()
model <- fit(model, x=io_train$input, y=io_train$output)
check()
load_all()
model <- fit(model, x=io_train$input, y=io_train$output)
check()
load_all()
model <- fit(model, x=io_train$input, y=io_train$output)
library(devtools)
library(reticulate)
check()
load_all()
install_python_dependencies()
n
install_python_dependencies()
install_python_dependencies()
install_python_dependencies()
library(devtools)
library(reticulate)
load_all()
install_python_dependencies()
library(devtools)
library(reticulate)
load_all()
install_python_dependencies()
load_all()
check()
load_all()
load_python_file()
load_all()
load_python_file()
check()
load_all()
load_python_file()
check()
load_python_file()
check()
load_python_file()
check()
load_all()
load_python_file()
check()
load_all()
load_python_file()
check()
load_python_file()
load_all()
load_python_file()
load_all()
load_python_file()
reticulate::source_python('./inst/python/ts_tlstm.py')
load_python_file()
load_python_file()
library(devtools)
library(reticulate)
load_all()
load_python_file()
library(reticulate)
source_python('./inst/module.py')
library(reticulate)
source_python('./inst/module.py')
x <- add(5, 10)
data <- data.frame(x = c(1:5), y=c(11:15))
dfm <- read_rdata_mem(data)
check()
check()
library(devtools)
library(reticulate)
check()
check()
load_all()
load_python_file()
load_python_file()
i <- seq(0, 25, 0.25)
x <- cos(i)
plot(i, x)
lines(i, x)
sw_size <- 10
s <- ts_data(x, sw_size)
ts <- ts_data(x, sw_size)
head(ts, 3)
test_size <- 1
samp <- ts_sample(ts, test_size)
head(samp$train, 3)
head(samp$test)
preproc <- ts_gminmax()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
load_python_file()
reticulate::source_python('./inst/python/ts_tlstm.py')
check()
load_all()
load_python_file()
check()
load_all()
load_python_file()
model <- fit(model, x=io_train$input, y=io_train$output)
print(describe(model))
lstm(input_size=4,epochs=10000)-minmax,0.026
adjust <- predict(model, io_train$input)
ev_adjust <- evaluation.tsreg(io_train$output, adjust)
print(head(ev_adjust$metrics))
steps_ahead <- 1
io_test <- ts_projection(samp$test)
prediction <- predict(model, x=io_test$input, steps_ahead=steps_ahead)
prediction <- as.vector(prediction)
output <- as.vector(io_test$output)
if (steps_ahead > 1)
output <- output[1:steps_ahead]
print(sprintf("%.2f, %.2f", output, prediction))
ev_test <- evaluation.tsreg(output, prediction)
print(head(ev_test$metrics))
print(sprintf("%s: smape: %.2f", describe(model), 100*ev_test$metrics$smape))
yvalues <- c(io_train$output, io_test$output)
plot(model, y=yvalues, yadj=adjust, ypre=prediction)
library(devtools)
library(reticulate)
load_all()
load_python_file()
library(devtools)
library(reticulate)
check()
usethis::use_package("reticulate")
check()
load_all()
library(devtools)
load_all()
i <- seq(0, 25, 0.25)
x <- cos(i)
plot(i, x)
lines(i, x)
sw_size <- 10
ts <- ts_data(x, sw_size)
head(ts, 3)
test_size <- 1
samp <- ts_sample(ts, test_size)
head(samp$train, 3)
head(samp$test)
preproc <- ts_gminmax()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
load_python_file()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
print(describe(model))
adjust <- predict(model, io_train$input)
ev_adjust <- evaluation.tsreg(io_train$output, adjust)
print(head(ev_adjust$metrics))
steps_ahead <- 1
io_test <- ts_projection(samp$test)
prediction <- predict(model, x=io_test$input, steps_ahead=steps_ahead)
prediction <- as.vector(prediction)
output <- as.vector(io_test$output)
if (steps_ahead > 1)
output <- output[1:steps_ahead]
print(sprintf("%.2f, %.2f", output, prediction))
ev_test <- evaluation.tsreg(output, prediction)
print(head(ev_test$metrics))
print(sprintf("%s: smape: %.2f", describe(model), 100*ev_test$metrics$smape))
yvalues <- c(io_train$output, io_test$output)
plot(model, y=yvalues, yadj=adjust, ypre=prediction)
library(devtools)
library(reticulate)
load_all()
check()
library(devtools)
check()
load_all()
i <- seq(0, 25, 0.25)
x <- cos(i)
sw_size <- 10
ts <- ts_data(x, sw_size)
test_size <- 1
samp <- ts_sample(ts, test_size)
preproc <- ts_gminmax()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
load_all()
load_all()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
load_all()
load_all()
load_all()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
load_all()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
load_all()
model <- ts_tlstm(preproc, input_size=4, epochs=10000)
io_train <- ts_projection(samp$train)
model <- fit(model, x=io_train$input, y=io_train$output)
adjust <- predict(model, io_train$input)
library(devtools)
load_all()
load_all()
?head
library(devtools)
load_all()
load_all()
library(devtools)
load_all()
?head
?dal_transform
?dal::fit
dal::fit()
?dal::fit
??fit
document()
?transform
?dal::transform
check()
load_all()
?transform
?transform.smoothing
document()
?transform.smoothing
debugSource("~/Downloads/dal/R/dal_transform.R")
source("~/Downloads/teste.R")
library(devtools)
check()
